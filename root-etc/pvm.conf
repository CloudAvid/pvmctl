#!/bin/bash
#  This file defines global configs and variables in PDNSoftCo.` Environment.
#  Also he defines some General Functions.
#
# CopyRight BY PDNSoft-Co.

#
# Programs
#

sed="/bin/sed"
awk="/usr/bin/awk"
basename="/bin/basename"
cat="/bin/cat"
chmod="/bin/chmod"
cp="/bin/cp"
grep="/bin/grep"
kill="/bin/kill"
kvm="/usr/libexec/qemu-kvm"
kvmimg="/usr/bin/qemu-img"
pgrep="/usr/bin/pgrep"
pkill="/usr/bin/pkill"
rm="/bin/rm"
sleep="/bin/sleep"
sudo="/usr/bin/sudo"
vncviewer="/usr/bin/vncviewer"
nc="/usr/bin/nc"
mkdir="/bin/mkdir"
dd="/bin/dd"
wc="/usr/bin/wc"
cut="/bin/cut"
date="/bin/date"
uname="/bin/uname"
tail="/usr/bin/tail"
vconfig="/sbin/vconfig"
brctl="/usr/sbin/brctl"
ifconfig="/sbin/ifconfig"
modprobe="/sbin/modprobe"
hwclock="/sbin/hwclock"
rsync="/usr/bin/rsync"
mv="/bin/mv"
stat="/usr/bin/stat"
touch="/bin/touch"
EDITOR="/bin/vi -n"
socat="/root/pvm/bin/socat"
mktemp="/bin/mktemp"
lvcreate="/usr/sbin/lvcreate"
lvremove="/usr/sbin/lvremove"
lvrename="/usr/sbin/lvrename"
perror="/usr/bin/perror"
service="/sbin/service"
drbdadm="/sbin/drbdadm"
ls="/bin/ls"

#
# RedHat Cluster Specific Commands
#

# Cluster Status Command
clustat="/usr/sbin/clustat"
# Cluster Service Management Command
clusvcadm="/usr/sbin/clusvcadm"
# Cluster Configuration file
clusconf="/etc/cluster/cluster.conf"
# Cluster Configuration Management tool
ccs_tool="/sbin/ccs_tool"
# Cluster Management tool
cman_tool="/usr/sbin/cman_tool"

# 
#  PVM Environment Special Varriables
#

#  Base Directory of PVM Environment
basedir="/pvm"

#  Number of log rotates
logro="7"
#  Number LVM config backups
lvmro="10"
#  Maximum rebasing of disk images ...
rebaseno="5"
#  Spice base port
spicebport="5000"

#  Different types of disk(image) storage of Virtual Machines
#  File System
STRG_FS="fs"
#  Volume Group
STRG_VG="vg"

#  Location of functions 
funcdir="$basedir/Scripts/funcs"
#  Location of pid file of running "VM"s
piddir="$basedir/var/run"
#  Location of "VM"s config files
confdir="$basedir/etc/pvm"
#  Directory of Virtualization Base Images for VM Creation
bidir="$basedir/VMStorage/BIs"
#  Location of "ISO" image files (cdroms)
isodir="$basedir/VMStorage/ISOs"
# Directory of Monitor sockets
mondir="$basedir/var/mon"
#  Location of Cluster Log files
logdir="/var/log/pvm"
# Directory of VirtualMachines Cluster Service files
srvdir="$basedir/Scripts/Services"
# Direcrory of LVM config backups
lvmbackdir="$basedir/var/lvm-back"
# Path to LVM config dir
lvmconf="/etc/lvm"

# 
# PVM Scripts
# 

#  PVM Virtual Machines Control Script (for local use)
pvmctl="$basedir/Scripts/pvmctl"
#  PVM Cluster Administrator Script
pcad="$basedir/Scripts/pcad"
#  MAC Address Generator Script
macgen="$basedir/Scripts/macgen.py"
#  PVM Service to Manage Virtual Machines in cluster
pvm_vm_service="$basedir/Scripts/pvm-vm-service"
#  Hourse of pvm-vm-service file
pvm_vm_service_hourse="$basedir/Scripts/pvm-vm-service-hourse"

# 
# PVM Environment Config files
#

# list of "VM"s that must be excluded from snapshot process
cf_snap_exclude="$basedir/etc/snap-exclude"
# indicates the places as contaners of disks of "VM"s.
cf_VMStorages="$basedir/etc/VMStorages"
# name of the log file for backup activities
cf_backup_log_file="$basedir/etc/backup-log-file"
# name of the cluster services activities log file
cf_vm_services_log_file="$basedir/etc/vm-services-log-file"
# log of remote site synchronization activity
cf_rsite_sync_log_file="$basedir/etc/rsite-sync-log-file"

#
#  Functions
#

#  This read the config file and removes:
#+	1- comments (strings start with '#')
#+	2- spaces from front/end of lines
#+	3- empty lines
#+ And prints out the result.
#  Usage: read_config_file "path-to-conf-file"
read_config_file()
{
	if [[ -f "$1" ]]; then 
		$sed -e "s/#.*//" \
			-e "s/[ ]*$//" \
			-e "/^[ ]*$/d" \
			-e "s/^[ ]*//" "$1"
	fi
}

#  Search for the first occurence of given "target" 
#+ in the elements of given "array".
#  Usage: search_array "target" "${array[@]}"
#  return values: 
#+ 	0: not found  
#+ 	position of target in array (index+1): if found
search_array()
{
	local i
	local _args
	local _num_args

	_args=( "$@" )
	_num_args="${#_args[@]}"

	if (( $_num_args <= 1 )); then
		return 0
	fi

	_target="${_args[0]}"
	unset _args[0] # removes target from array

	for (( i = 0; i < _num_args; i++)); do
		if [[ "${_args[i]}" = "$_target" ]]; then
			return "$i"
		fi
	done
	return 0
}

#  Generate The Full Path of the log file base on the
#+ Contenet of associated config file.
#  Usage: gen_logfile_fpath "config_file"
gen_log_file_fpath()
{
	local _log_file

	_log_file="/dev/null"
	if [[ -f "$1" ]]; then
		_log_file=$( read_config_file "$1" )

		# check if the path is full or not?
		if [[ $(expr ${_log_file} : '/') -eq 0 ]]; then
			_log_file="$logdir/$_log_file"
		fi
	fi
	# check existance of log file
	if [[ -f "$_log_file" ]]; then
		echo "$_log_file"
	else
		echo "/dev/null"
	fi
}

#  Rotates Log files base on the log size threshold
#  Usage: rotate_log_file "config_file"
rotate_log_file()
{
	local i
	local log_file

	log_file=$( gen_log_file_fpath "$1" )
	if [[ "$log_file" = "/dev/null" ]]; then
		return 0
	fi

	$rm -f -v "$log_file.$(( $logro - 1 ))"
	for((i=$(($logro - 2 )); i>=0; i-- )); do
		if [[ -f "$log_file.$i" ]]; then
			$mv -v "$log_file.$i" "$log_file.$(($i + 1))"
		fi
	done
	$mv  -v "$log_file" "$log_file.0"
	$touch "$log_file"
	return 1
}

# ask from user: Are you sure? 
# return values: 1: yes     0: no
# usage: _are_you_sure "Message"
are_you_sure()
{
	local yesno

	echo -n "$1 Are you sure (y/*)? "
	read yesno
	if [[ $yesno != "y" ]]; then
		return 0
	fi
	return 1
}

# echo message to stanfard error
# usage: echo_error "Message" 
echo_error()
{
	echo "Failed: $1" >&2
}

# echo usage message to stanfard error
# usage: echo_error "usage message" 
echo_usage()
{
	echo "usage: $1" >&2
}
