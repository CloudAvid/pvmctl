#!/bin/bash
# Schedule offsite-back base of $rcf_offsite_backup content

. /etc/pvm.conf
. "$funcdir/vm"
. "$funcdir/offback"

logfile=$(gen_log_file_fpath $cf_rsite_sync_log_file)

myname=$($uname -n)
vms=$( $pvmctl "status" | $sed -e "1d" )

off_vms=("")
j=0
pcad_vms=($( $pcad status | $grep service | $cut -d ":" -f 2 ))
pcad_vms_no=$((${#pcad_vms[@]} / 3))
for ((i=0; i<$pcad_vms_no; ++i)); do
	if [[ "${pcad_vms[i*3+2]}" = "disabled" || "${pcad_vms[i*3+2]}" = "stopped" ||
		"${pcad_vms[i*3+2]}" = "failed" ]]; then
		off_vms[$j]=${pcad_vms[i*3]}
		j=$((j + 1))
	fi
done

(
	flock -s 201
	$sed -i -e "/# Automated Generated By PVM: Start/,/# Automated Generated By PVM: End/d" /etc/crontab

	# Scheduling in mirror state.
	is_mirror=$(read_config_file $cf_is_mirror)
	if [[ $is_mirror = "yes" ]]; then
		mirror_offback_sched="/tmp/mirror_offback_sched_$RANDOM"
		read_config_file $cf_offback_rsites | while read rsite; do
			bindto=$(echo $rsite | $cut -d ';' -f 6)
			if [[ "$bindto" = "$myname" || "$bindto" = "*" ]]; then
				_address=$(echo $rsite | $cut -d ';' -f 1)
				_type=$(echo $rsite | $cut -d ';' -f 2)
				_prefix=$(echo $rsite | $cut -d ';' -f 3)
				_user=$(echo $rsite | $cut -d ';' -f 4)
				_password=$(echo $rsite | $cut -d ';' -f 5)

				echo_result "offback-sched: $_address selected." >> $logfile
				if [[ $_type != "rsync" ]]; then
					echo_error "offback-sched: bad rsite type." >> $logfile 2>&1
				fi

				export RSYNC_PASSWORD=$_password
				$rsync -avr rsync://$_user@$_address/PVM_RCF/offback_sched "$mirror_offback_sched" >/dev/null 2>&1
				if [[ $? -ne "0" ]]; then
					echo_error "offback-sched: Can't access schedul info, $(pperror $ret)" >> $logfile 2>&1
					echo_error "offback-sched: Going to choose other site if exist." >> $logfile 2>&1
					continue
				else
					break;
				fi
			fi
		done
		if [[ ! -f "$mirror_offback_sched" ]]; then
			echo_error "offback-sched: Couldn't access mirror site schedule info." >> $logfile 2>&1
			exit 1
		fi

		for vm in ${vms[@]}; do
			vm_mirror_sched=$($sed -n -e "/ $vm$/p" "$mirror_offback_sched")
			if [[ -z "$vm_mirror_sched" ]]; then
				schedule_vm $vm
			else
				echo_error "offback-sched: \"$vm\" couldn't be scheduled, because of scheduling in mirror site. " >> $logfile 2>&1
				del_vm_sched_info $vm
			fi
		done
		for vm in ${off_vms[@]}; do
			del_vm_sched_info $vm
		done
		$rm -f "$mirror_offback_sched" >/dev/null 2>&1
	fi

	echo "# Automated Generated By PVM: Start" >> /etc/crontab
	for vm in ${vms[@]}; do
		if [[ "$is_mirror" != "yes" ]]; then
			schedule_vm $vm
		fi
		crontab_vm $vm
	done
	offnode=$(read_config_file $cf_offbacknode_4_offvm)
	if [[ $offnode = $myname ]]; then
		for offvm in ${off_vms[@]}; do
			if [[ "$is_mirror" != "yes" ]]; then
				schedule_vm "$offvm"
			fi
			crontab_vm "$offvm"
		done
		
		unset pvmdir_offback_weekday
		unset pvmdir_offback_hour
		. "$cf_pvmdir_offback_policy"
		schedule_offback "$pvmdir_offback_name" "$pvmdir_offback_weekday" "$pvmdir_offback_hour"
		crontab_vm "$pvmdir_offback_name"
	fi
	echo "# Automated Generated By PVM: End" >> /etc/crontab

	if [[ -x $basedir/Scripts/pvm-check-cluster-config-file ]]; then
		$basedir/Scripts/pvm-check-cluster-config-file  >> $logfile 2>&1
	fi
) 201>$lck_offback_sched

service crond restart >/dev/null 2>&1


