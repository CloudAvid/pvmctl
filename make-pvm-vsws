#!/bin/bash
# Copyright PDNSoft Co.
# By: HMT
# Creates Vlan Ethernets and their associated bridges

. /etc/pvm.conf

$modprobe "8021q" 

_do_add_br()
{
	local i
	local no_eth
	local np_eth
	local args
	local vsw
	args=(${@})

	vsw=${args[0]}

	unset args[0]

	no_eth=${#args[@]}
	np_eth=0
	for ((i = 0; $np_eth < $no_eth; ++i)); do
		# Jump from NULL elements
		if [[ ${args[i]-__NULL__} = "__NULL__" ]]; then
			continue
		fi
		np_eth=$((np_eth + 1))
		$brctl addif $vsw ${args[i]} >/dev/null 2>&1
		$ifconfig ${args[i]} 0.0.0.0 up >/dev/null 2>&1
	done
}

_do_add_brv()
{
	local i
	local no_eth
	local np_eth
	local args
	local vsw
	args=(${@})

	vsw=${args[0]}

	unset args[0]

	no_eth=${#args[@]}
	np_eth=0
	for ((i=0; $np_eth < $no_eth; ++i)); do
		# Jump from NULL elements
		if [[ ${args[i]-__NULL__} = "__NULL__" ]]; then
			continue
		fi
		np_eth=$((np_eth + 1))
		if [[ ${args[i+1]-__NULL__} = "__NULL__" ]]; then
			continue
		fi
		np_eth=$((np_eth + 1))
		$vconfig add ${args[i]} ${args[i+1]} >/dev/null 2>&1
		$ifconfig ${args[i]}.${args[i+1]} 0.0.0.0 up >/dev/null 2>&1
		$ifconfig ${args[i]} 0.0.0.0 up >/dev/null 2>&1
		$brctl addif $vsw ${args[i]}.${args[i+1]} >/dev/null 2>&1
		i=$((i + 1))
	done
}

do_add_vsw()
{
	local vsw_cfg
	local vsw
	local address
	local typ

	vsw_cfg=($@)
	if [[ ${#vsw_cfg[@]} -lt 4 ]]; then
		echo_error "vsw:\"${vsw_cfg[0]}\" doesn't have enough config parameters ..!"
		return 1
	fi

	vsw=${vsw_cfg[0]}
	address=${vsw_cfg[1]}
	typ=${vsw_cfg[2]}
	stp=${vsw_cfg[3]}
	
	unset vsw_cfg[1]
	unset vsw_cfg[2]
	unset vsw_cfg[3]

	$brctl addbr "$vsw" >/dev/null 2>&1
	$ifconfig "$vsw" "$address" up >/dev/null 2>&1
	case "$stp" in
	"on")
		$brctl stp "$vsw" on >/dev/null 2>&1
		;;
	"off")
		$brctl stp "$vsw" off >/dev/null 2>&1
		;;
	*)
		$brctl stp "$vsw" off >/dev/null 2>&1
		;;
	esac

	case $typ in
	"br")
		_do_add_br ${vsw_cfg[@]}
		;;
	"brv")
		_do_add_brv ${vsw_cfg[@]}
		;;
	*)
		echo_error "vsw:\"$vsw\" has bad virtual switch type ..!"
		return 1
		;;
	esac
	return 0
}

_do_del_brv()
{
	local i
	local no_eth
	local np_eth
	local args
	args=(${@})

	no_eth=${#args[@]}
	np_eth=0
	for ((i=0; $np_eth < $no_eth; ++i)); do
		# Jump from NULL elements
		if [[ ${args[i]-__NULL__} = "__NULL__" ]]; then
			continue
		fi
		np_eth=$((np_eth + 1))
		if [[ ${args[i+1]-__NULL__} = "__NULL__" ]]; then
			continue
		fi
		np_eth=$((np_eth + 1))
		$ifconfig ${args[i]}.${args[i+1]} down >/dev/null 2>&1
		$vconfig rem ${args[i]}.${args[i+1]} >/dev/null 2>&1
		i=$((i + 1))
	done
}

do_del_vsw()
{
	local vsw_cfg
	local vsw
	local address
	local typ

	vsw_cfg=($@)
	if [[ ${#vsw_cfg[@]} -lt 4 ]]; then
		echo_error "vsw:\"${vsw_cfg[0]}\" doesn't have enough config parameters ..!"
		return 1
	fi

	vsw=${vsw_cfg[0]}
	typ=${vsw_cfg[2]}
	
	unset vsw_cfg[0]
	unset vsw_cfg[1]
	unset vsw_cfg[2]
	unset vsw_cfg[3]

	case "$typ" in
	"br")
		;;
	"brv")
		_do_del_brv ${vsw_cfg[@]}
		;;
	*)
		echo_error "vsw:\"$vsw\" has bad virtual switch type ..!"
		;;
	esac
	$ifconfig $vsw down >/dev/null 2>&1
	$brctl delbr $vsw >/dev/null 2>&1
	return 0
}

cmd="$1"

case "$cmd" in
"load")
	read_config_file "$cf_virtual_switches" | while read i; do
		args=($i)
		do_add_vsw ${args[@]}
	done
	;;
"unload")
	read_config_file "$cf_virtual_switches" | while read i; do
		args=($i)
		do_del_vsw ${args[@]}
	done
	;;	
"add")
	vsw="$2"
	vsw_cfg=($($cat "$cf_virtual_switches" | $grep "$vsw "))
	do_add_vsw ${vsw_cfg[@]}
	exit "$?"
	;;
"del")
	vsw="$2"
	vsw_cfg=($($cat "$cf_virtual_switches" | $grep "$vsw "))
	do_del_vsw ${vsw_cfg[@]}
	exit "$?"
	;;
*)
	;;
esac
