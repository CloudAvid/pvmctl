#!/bin/bash
# PVM Info in XML Format

# XML Format version
xver="0.1"

# Generate VM Information list
# usage: pinfox_vminfo host
pinfox_vminfo()
{
	local infox
	local first_disk
	local no_vdisk
	local np_vdisk
	if [ -z $1 ]; then
		echo_usage "vminfo host"
		exit 1
	fi
	check_host "$1"
	load_configfile "$1"

	infox="<pvm ver=\"$xver\"><name>$1</name>"
	infox+="<id>$id</id><sid>$sid</sid>"
	infox+="<des>$des</des><ip>$ip</ip>"
	infox+="<vsys>"
	infox+="<nic>$nic</nic>"
	infox+="<ncpu>$cpus</ncpu><mem>$mem</mem>"
	infox+="<bios><boot>$boot</boot></bios>"
	infox+="<disks>"

	# Number of virtual drives
	no_vdisk="${#disk[@]}"
	# Number of processed virtula drives
	np_vdisk=0
	for (( i = 0; "$np_vdisk" < "$no_vdisk"; ++i)); do
		# Jump from NULL elements
		if [[ ${disk[i]-__NULL__} = "__NULL__" ]]; then
			continue
		fi
		np_vdisk=$(( ++np_vdisk ))

		# Check if is there any disk string
		disk="${disk[i]}"
		if [[ -z "$disk" ]]; then 
			continue
		fi
		infox+="<disk>"
		infox+="<source>${disk[i]}</source>"
		infox+="<media>${media[i]}</media>"
		infox+="<interface>${disktype[i]}</interface>"
		if [[ "${media[i]}" = "disk" ]]; then
			infox+="<vsize>$($kvmimg info $vmstrg/${disk[i]} 2>/dev/null | \
				$grep virtual\ size | cut -d \  -f 3)</vsize>"
			infox+="<rsize>$($kvmimg info $vmstrg/${disk[i]} 2>/dev/null| \
				$grep disk\ size | cut -d \  -f 3)</rsize>"
			if [ -z $first_disk ]; then first_disk="$vmstrg/${disk[i]}"; fi
		fi
		infox+="</disk>"
	done
	infox+="</disks>"
	infox+="<eths>"

	# Number of Ethernet Cards
	no_eths="${#vlan[@]}"
	# Number of Processed Ethernet Cards
	np_eths=0
	for (( i =0; $np_eths < $no_eths; ++i)); do
		if [[ ${vlan[i]-__NULL__} = "__NULL__" ]]; then
			continue;
		fi
		np_eths=$(( ++np_eths ))
		infox+="<eth>"
		infox+="<vlan>${vlan[i]}</vlan>"
		infox+="<model>${vlantype[i]}</model>"
		infox+="<macaddr>${macaddr[i]}</macaddr>"
		infox+="</eth>"
	done
	infox+="</eths>"
	infox+="<usbdevs>"
	infox+="<usb>$host_usb1</usb>"
	infox+="</usbdevs>"
	infox+="</vsys>"
	infox+="<venv><snaps>"
	if [[ ("$strgtype" = "$STRG_FS") && (! -z "$first_disk") ]]; then
		infox+=$($kvmimg snapshot -l $first_disk | $sed -e "/Snapshot list:/d" -e "/ID   /d" | 
			while read __i; do
				infox="<snap>"
				_snap_id=$(echo $__i | $cut -s -d " " -f 1)
				_snap_name=$(echo $__i | $cut -s -d " " -f 2)
				_snap_date=$(echo $__i | $cut -s -d " " -f 4)
				_snap_hour=$(echo $__i | $cut -s -d " " -f 5)
				infox+="<id>$_snap_id</id><name>$_snap_name</name><date>$_snap_date</date><hour>$_snap_hour</hour>"
				infox+="</snap>"
				echo -n $infox
			done)
	fi
	infox+="</snaps></venv>"
	infox+="</pvm>"
	echo "$infox"
}

# Generate List of SIDs
pinfox_sids()
{
	local infox
	local __id
	local __type
	local __path
	local __name

	infox="<pvm_sids ver=\"$xver\">"
	infox+=$( read_config_file "$cf_VMStorages" | while read __i; do
		infox="<sid>"
		__id=$(echo $__i | $cut -s -d ";" -f 1)
		__type=$(echo $__i | $cut -s -d ";" -f 2)
		__path=$(echo $__i | $cut -s -d ";" -f 3)
		__name=$(echo $__i | $cut -s -d ";" -f 4)
		case "$__type" in
			"$STRG_FS")
				_tx=$(df -h "$__path" 2>/dev/null | $sed -e "1d")
				__size=$(echo $_tx | cut -d " " -f 2)
				__free=$(echo $_tx | cut -d " " -f 4)
				;;
			"$STRG_VG")
				_tx=$(vgs 2>/dev/null | grep $($basename "$__path"))
				__size=$(echo $_tx | cut -d " " -f 6)
				__free=$(echo $_tx | cut -d " " -f 7)
				;;
		esac
		infox+="<id>$__id</id><type>$__type</type><path>$__path</path><name>$__name</name>"
		infox+="<size>$__size</size><freesize>$__free</freesize></sid>"
		echo -n $infox
	done)
	infox+="</pvm_sids>"
	echo $infox
}

# Print out list of templates 
pinfox_tmpls()
{
	local infox
	local i
	infox="<pvm_tmpls ver=\"$xver\">"
	for i in $($ls "$bidir"); do
		_conf=`expr match "$i" ".*.pvm"`
		if [[ $_conf -eq 0 ]]; then
			infox+="<tmpl>$i</tmpl>"
		fi
	done
	infox+="</pvm_tmpls>"
	echo $infox
}

# Print ou list of iso files
pinfox_isos()
{
	local infox
	local i
	infox="<pvm_isos ver=\"$xver\">"
	for i in $($ls "$isodir"); do
		infox+="<iso>$i</iso>"
	done
	infox+="</pvm_isos>"
	echo $infox
}
