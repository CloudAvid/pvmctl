#!/bin/bash
# PVM Info in XML Format

# XML Format version
xver="0.1"

# Generates Nodes List in the cluster
pinfox_cluster()
{
	local infox

	infox="<pvm_cluster ver=\"$xver\">"
	infox+="<cluster_name>$($pcad status | $sed -n '1p' | $cut -d ' ' -f 4)</cluster_name>"
	infox+="<cluster_status>$($pcad status | $sed -n '2p' | $cut -d ' ' -f 3)</cluster_status>"
	infox+="<cluster_pcm_ver>$($pcad ver)</cluster_pcm_ver>"
	infox+="<cluster_plm_ver>$($pvmctl ver)</cluster_plm_ver>"
	infox+="<cluster_nodes>"
	infox+=$($pcad status | $sed -n '/Member Name/,/Service Name/p' \
			| $sed '1,2d' | $sed '$d' | $sed '$d' | while read i; do
			infox="<node>"
			infox+="<name>$(echo $i | cut -d ' ' -f 1 )</name>"
			infox+="<id>$(echo $i | cut -d ' ' -f 2 )</id>"
			echo $i | $grep "Online" >/dev/null 2>&1
			if [[ $? -eq 0 ]]; then
				infox+="<status>online</status>"
			else
				infox+="<status>offline</status>"
			fi
			infox+="</node>"
			echo $infox
		done )
	infox+="</cluster_nodes>"
	infox+="</pvm_cluster>"
	echo $infox
}

# Generate VM Information list
# usage: _pinfox_vminfo host
_pinfox_vminfo()
{
	local infox
	local first_disk
	local no_vdisk
	local np_vdisk

	check_host "$1"
	load_configfile "$1"

	infox="<name>$1</name>"
	infox+="<id>$id</id><sid>$sid</sid>"
	infox+="<des>$des</des><ip>$ip</ip>"
	infox+="<vsys>"
	infox+="<nic>$nic</nic>"
	infox+="<cpu>"
	infox+="<ncpu>$cpus</ncpu>"
	infox+="<sockets>$cpus_sockets</sockets>"
	infox+="<cores>$cpus_cores</cores>"
	infox+="<threads>$cpus_threads</threads>"
	infox+="</cpu>"
	infox+="<mem>$mem</mem>"
	infox+="<bios><boot>$boot</boot></bios>"
	infox+="<disks>"

	# Number of virtual drives
	no_vdisk="${#disk[@]}"
	# Number of processed virtula drives
	np_vdisk=0
	for (( i = 0; "$np_vdisk" < "$no_vdisk"; ++i)); do
		# Jump from NULL elements
		if [[ ${disk[i]-__NULL__} = "__NULL__" ]]; then
			continue
		fi
		np_vdisk=$(( ++np_vdisk ))

		# Check if is there any disk string
		disk="${disk[i]}"
		if [[ -z "$disk" ]]; then 
			continue
		fi
		infox+="<disk>"
		infox+="<source>${disk[i]}</source>"
		infox+="<media>${media[i]}</media>"
		infox+="<interface>${disktype[i]}</interface>"
		if [[ "${media[i]}" = "disk" ]]; then
			infox+="<vsize>$($kvmimg info $vmstrg/${disk[i]} 2>/dev/null | \
				$grep virtual\ size | cut -d \  -f 3)</vsize>"
			infox+="<rsize>$($kvmimg info $vmstrg/${disk[i]} 2>/dev/null| \
				$grep disk\ size | cut -d \  -f 3)</rsize>"
			if [ -z $first_disk ]; then first_disk="$vmstrg/${disk[i]}"; fi
		fi

		if [[ ! -z ${cache[i]} ]]; then
			infox+="<cache>${cache[i]}</cache>"
		fi
		if [[ ${snapshot[i]} = "on" ]]; then
			infox+="<snapshot/>"
		fi

		infox+="</disk>"
	done
	infox+="</disks>"
	infox+="<eths>"

	# Number of Ethernet Cards
	no_eths="${#vlan[@]}"
	# Number of Processed Ethernet Cards
	np_eths=0
	for (( i =0; $np_eths < $no_eths; ++i)); do
		if [[ ${vlan[i]-__NULL__} = "__NULL__" ]]; then
			continue;
		fi
		np_eths=$(( ++np_eths ))
		infox+="<eth>"
		infox+="<vlan>${vlan[i]}</vlan>"
		infox+="<model>${vlantype[i]}</model>"
		infox+="<macaddr>${macaddr[i]}</macaddr>"
		infox+="</eth>"
	done
	infox+="</eths>"
	infox+="<usbdevs>"
	if [[ ! -z $host_usb1 ]]; then
		infox+="<usb>$host_usb1</usb>"
	fi
	# number of host usbs
	no_usbs=${#host_usb[@]}
	# number of processed host usbs
	np_usbs=0
	for (( i =0; $np_usbs < $no_usbs; ++i)); do
		if [[ ${host_usb[i]-__NULL__} = "__NULL__" ]]; then
			continue;
		fi
		np_usbs=$(( ++np_usbs ))
		infox+="<usb>${host_usb[i]}</usb>"
	done
	infox+="</usbdevs>"
	infox+="</vsys>"
	infox+="<venv><snaps>"
	if [[ ("$strgtype" = "$STRG_FS") && (! -z "$first_disk") ]]; then
		infox+=$($kvmimg snapshot -l $first_disk | $sed -e "/Snapshot list:/d" -e "/ID   /d" | 
			while read __i; do
				infox="<snap>"
				_snap_id=$(echo $__i | $cut -s -d " " -f 1)
				_snap_name=$(echo $__i | $cut -s -d " " -f 2)
				_snap_date=$(echo $__i | $cut -s -d " " -f 4)
				_snap_hour=$(echo $__i | $cut -s -d " " -f 5)
				infox+="<id>$_snap_id</id><name>$_snap_name</name><date>$_snap_date</date><hour>$_snap_hour</hour>"
				infox+="</snap>"
				echo -n $infox
			done)
	fi
	infox+="</snaps>"
	infox+="<basevm>$basevm</basevm>"
	infox+="</venv>"
	#infox+="</pvm>"
	echo "$infox"
}

pinfox_hostinfo()
{
        local infox
        infox="<pvm_host ver=\"$xver\">"
	infox+="<hostname>`hostname`"
	infox+="<cpus>`cat /proc/cpuinfo | grep processor | wc -l`</cpus>"
	infox+="<cpumodel>`cat /proc/cpuinfo | grep "model name" | uniq`</cpumodel>"
	infox+="<totalmemory>` cat /proc/meminfo | grep MemTotal | awk '{print $2}'`</totalmemory>"
	infox+="<freememory>`cat /proc/meminfo | grep MemFree | awk '{print $2}'`</freememory>"
	infox+="<swaptotal>`cat /proc/meminfo | grep SwapTotal | awk '{print $2}'`</swaptotal>"
	infox+="<swapfree>`cat /proc/meminfo | grep SwapFree | awk '{print $2}'`</swapfree>"
	infox+="</hostname>"
	infox+="</pvm_host>"
        echo $infox
}

# Hourse of _pinfox_vminfo 
pinfox_vminfo()
{
	local infox
	if [ -z $1 ]; then
		echo_usage "vminfo host"
		exit 1
	fi
	infox="<vm ver=\"$xver\">"
	infox+=$( _pinfox_vminfo $1 )
	infox+="</vm>"	
	echo $infox
}

pinfox_vms()
{
	local infox
	local vms
	local vms_no
	local i
	infox="<pvm_vms ver=\"$xver\">"
	vms=($( $pcad status | $grep service | $cut -d ":" -f 2 ))
	vms_no=$((${#vms[@]} / 3))
	for ((i=0; i<$vms_no; ++i)); do
		infox+="<pvm>"
		infox+=$( pinfox_vminfo ${vms[i*3]} )
		infox+="<cluster><node>${vms[i*3+1]}</node><status>${vms[i*3+2]}</status></cluster>"
		infox+="</pvm>"
	done
	infox+="</pvm_vms>"
	echo $infox
}

# Generate List of SIDs
pinfox_sids()
{
	local infox
	local __id
	local __type
	local __path
	local __name

	infox="<pvm_sids ver=\"$xver\">"
	infox+=$( read_config_file "$cf_VMStorages" | while read __i; do
		infox="<sid>"
		__id=$(echo $__i | $cut -s -d ";" -f 1)
		__type=$(echo $__i | $cut -s -d ";" -f 2)
		__path=$(echo $__i | $cut -s -d ";" -f 3)
		__name=$(echo $__i | $cut -s -d ";" -f 4)
		case "$__type" in
			"$STRG_FS")
				_tx=$(df -h "$__path" 2>/dev/null | $sed -e "1d")
				__size=$(echo $_tx | cut -d " " -f 2)
				__free=$(echo $_tx | cut -d " " -f 4)
				;;
			"$STRG_VG")
				_tx=$(vgs 2>/dev/null | grep $($basename "$__path"))
				__size=$(echo $_tx | cut -d " " -f 6)
				__free=$(echo $_tx | cut -d " " -f 7)
				;;
		esac
		infox+="<id>$__id</id><type>$__type</type><path>$__path</path><name>$__name</name>"
		infox+="<size>$__size</size><freesize>$__free</freesize></sid>"
		echo -n $infox
	done)
	infox+="</pvm_sids>"
	echo $infox
}

# Print out list of templates 
pinfox_tmpls()
{
	local infox
	local i
	infox="<pvm_tmpls ver=\"$xver\">"
	infox+=$( $ls "$bidir" | while read i; do
		_conf=`expr match "$i" ".*.pvm"`
		if [[ $_conf -eq 0 ]]; then
			echo -n "<tmpl>$i</tmpl>"
		fi
	done )
	infox+="</pvm_tmpls>"
	echo $infox
}

# Print ou list of iso files
pinfox_isos()
{
	local infox
	local i
	infox="<pvm_isos ver=\"$xver\">"
	infox+=$( $ls "$isodir" | while read i; do
		echo -n "<iso>$i</iso>"
	done )
	infox+="</pvm_isos>"
	echo $infox
}

_pinfox_vsw_br()
{
	local i
	local no_eth
	local np_eth
	local args
	local infox
	args=(${@})

	infox="<interfaces>"
	no_eth=${#args[@]}
	np_eth=0
	for ((i = 0; $np_eth < $no_eth; ++i)); do
		# Jump from NULL elements
		if [[ ${args[i]-__NULL__} = "__NULL__" ]]; then
			continue
		fi
		np_eth=$((np_eth + 1))
		infox+="<if><name>${args[i]}</name></if>"
	done
	infox+="</interfaces>"
	echo $infox
}

_pinfox_vsw_brv()
{
	local i
	local no_eth
	local np_eth
	local args
	local infox
	args=(${@})

	infox="<interfaces>"

	no_eth=${#args[@]}
	np_eth=0
	for ((i=0; $np_eth < $no_eth; ++i)); do
		# Jump from NULL elements
		if [[ ${args[i]-__NULL__} = "__NULL__" ]]; then
			continue
		fi
		np_eth=$((np_eth + 1))
		if [[ ${args[i+1]-__NULL__} = "__NULL__" ]]; then
			continue
		fi
		np_eth=$((np_eth + 1))
		infox+="<if><name>${args[i]}</name><vlanid>${args[i+1]}</vlanid></if>"
		i=$((i + 1))
	done
	infox+="</interfaces>"
	echo $infox
}

pinfox_vsws()
{
	local infox
	local args
	local i
	infox="<pvm_vsws ver=\"$xver\">"
	infox+=$( read_config_file $cf_virtual_switches | while read i; do
		args=($i)
		if [[ ${#args[@]} -lt 3 ]]; then
			continue;
		fi

		infox="<vsw>"
		infox+="<name>${args[0]}</name>"
		infox+="<address>${args[1]}</address>"
		infox+="<type>${args[2]}</type>"
		infox+="<stp>${args[3]}</stp>"
		
		typ=${args[2]}
		unset args[0]
		unset args[1]
		unset args[2]
		unset args[3]

		case $typ in
		"br")
			infox+=$(_pinfox_vsw_br ${args[@]})
			;;
		"brv")
			infox+=$(_pinfox_vsw_brv ${args[@]})
			;;
		*)
			;;
		esac
		infox+="</vsw>"
		echo -n $infox
	done)
	infox+="</pvm_vsws>"
	echo $infox
}

pinfox_eths()
{
	local i
	local infox
	infox="<pvm_eths ver=\"$xver\">"
	infox+=$($cat "/etc/udev/rules.d/70-persistent-net.rules" \
		| $grep SUBSYSTEM | $cut -d " " -f 7 \
		| $sed -e "s/NAME=\"//" -e "s/\"//" | while read i; do

		echo -n "<eth>$i</eth>"
	done)
	infox+="</pvm_eths>"
	echo $infox
}

pinfox_usbs()
{
	local i
	local infox
	infox="<pvm_usbs ver=\"$xver\">"
	infox+=$($lsusb | $sed -e "s/://" | while read i; do
		x=($i)
		infox="<usb>"
		infox+="<id>$((10#${x[1]})).$((10#${x[3]}))</id>"
		unset x[0]
		unset x[1]
		unset x[2]
		unset x[3]
		infox+="<des>${x[@]}</des></usb>"
		echo -n $infox
	done)
	infox+="</pvm_usbs>"
	echo $infox
}

