#!/bin/bash
# functions to manage offsite-backup settings

# Delete remote site from setting file
# usage: do_delrsite "config line"
do_delrsite()
{
	local rsite
	if [[ -z $1 ]]; then
		echo_usage "delrsite config_line"
		exit 1
	fi
	$sed -i -e "/${1//'/'/\/}/d" $cf_offback_rsites
}

# Delete remote site from setting file
# usage: do_addrsite "config line"
do_addrsite()
{
	if [[ -z $1 ]]; then
		echo_usage "addrsite config_line"
		exit 1
	fi
	echo "$1" >> $cf_offback_rsites
}

# Change node to backup-up offline-vms
do_choffnode()
{
	if [[ -z $1 ]]; then
		echo_usage "choffnode node_name"
		exit 1
	fi
	echo "$1" > $cf_offbacknode_4_offvm
}

# schedule a defined offback policy.
# usage: schedule_offback host weekday hour
schedule_offback()
{
	local days
	local offback_hour
	local cpos 
	local hour
	local minute
	if [[ -z $1 ]]; then
		return 1
	fi

	days="$2"
	offback_hour="$3"
	$sed -i -e "/ $1$/d" $rcf_offback_sched >/dev/null 2>&1
	if [[ (! -z $days) && ($days != "none") ]]; then
		if [[ $days = "all" ]]; then days="*"; fi
		if [[ ! -z $offback_hour ]]; then
			cpos=$(expr index $offback_hour ':')
			if [[ $cpos -ne "0" ]]; then
				hour=${offback_hour:0:$((cpos - 1))}
				minute=${offback_hour:$cpos}

				echo "$minute $hour * * $days root $pvm_offsite_backup $1" >> $rcf_offback_sched 
			fi
		fi
	fi
	return 0
}

schedule_offback_lock()
{
	local ret
	(
		flock -s 201
		schedule_offback "$1" "$2" "$3"
		ret="$?"
	) 201>$lck_offback_sched
	return $ret
}

schedule_vm()
{
	unset offback_weekday
	unset offback_hour

	load_configfile "$1"

	schedule_offback "$1" "$offback_weekday" "$offback_hour"
	return $?
}

schedule_vm_lock()
{
	load_configfile "$1"

	schedule_offback_lock "$1" "$offback_weekday" "$offback_hour"
	return $?
}

# Delete vm scheduling info for vm.
# usage: del_vm_sched_info "vm-name"
del_vm_sched_info()
{
	$sed -i -e "/ $1$/d" $rcf_offback_sched >/dev/null 2>&1
}

# Retrive VM schedule info from "$rcf_offback_sched" file.
# usage: vm_sched_info "vm-name"
vm_sched_info()
{
	$sed -n -e "/ $1$/p" "$rcf_offback_sched"
}

# Append VM schedule info to the /etc/crontab
# usage: crontab_vm "vm-name"
crontab_vm()
{
	local vm_sched
	vm_sched=$(vm_sched_info "$1")
	if [[ ! -z $vm_sched ]]; then
		echo "$vm_sched" >> /etc/crontab
		return 0
	fi
	return 1
}

